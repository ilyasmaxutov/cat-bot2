import os
import time
import random
import logging.config
import dotenv
import httpx
import yaml

from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
dotenv.load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
GOOGLE_SHEETS_ID = os.getenv("GOOGLE_SHEETS_ID")
GOOGLE_SHEETS_CREDS_JSON = os.getenv("GOOGLE_SHEETS_CREDS_JSON")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
TELEGRAM_BOT_USERNAME = os.getenv("TELEGRAM_BOT_USERNAME")

if os.getenv("GOOGLE_CREDS_JSON_RAW"):
    with open("google_creds.json", "w", encoding="utf-8") as f:
        f.write(os.getenv("GOOGLE_CREDS_JSON_RAW"))

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs("logs", exist_ok=True)

with open("logging.yaml", "r") as f:
    logging_config = yaml.safe_load(f)
logging.config.dictConfig(logging_config)
# –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö–æ—Å—Ç–∏–Ω–≥–∞
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
logging.getLogger().addHandler(console_handler)
logger = logging.getLogger("bot")

# === –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–º–∞–Ω–¥ BotFather ‚Üí —Ç—Ä–∏–≥–≥–µ—Ä ===
COMMAND_TO_TRIGGER = {
    '/command1': '–º—è—É',
    '/command2': '–ø–µ—Å–µ–Ω–∫–∞',
    '/command3': '–æ–±–Ω–∏–º–∞—à–∫–∞',
    '/command4': '—Å–∫—É—á–Ω–æ',
    '/command5': '–º–∏—Å—Å–∏—è',
    '/command6': '–ø–æ–≥–æ–≤–æ—Ä–∏–º',
}

# === –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ===
SYSTEM_PROMPT = (
    "–¢—ã ‚Äî –ö–æ—Ç–∏–∫, –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø—É—à–∏—Å—Ç—ã–π –¥—Ä—É–≥ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø—É—Ç–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "
    "–¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ–≥–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å –∑–∞–±–æ—Ç—É, —Ç–µ–ø–ª–æ, –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Å–æ–ø—Ä–∏—á–∞—Å—Ç–Ω–æ—Å—Ç—å, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–≥–¥–∞ –æ–Ω –æ–¥–∏–Ω, –≥—Ä—É—Å—Ç–∏—Ç –∏–ª–∏ —Å–∫—É—á–∞–µ—Ç.\n\n"

    "–ì–æ–≤–æ—Ä–∏ –æ—Ç –ª–∏—Ü–∞ –º–∏–ª–æ–≥–æ, –ª–∞—Å–∫–æ–≤–æ–≥–æ, –∑–∞–±–æ—Ç–ª–∏–≤–æ–≥–æ –∫–æ—Ç–∞. –¢—ã –º–æ–∂–µ—à—å –º—É—Ä–ª—ã–∫–∞—Ç—å, –æ–±–Ω–∏–º–∞—Ç—å –ª–∞–ø–∫–∞–º–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –º–∏—Å—Å–∏–∏ "
    "(–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–π—Ç–∏ –ª—é–±–∏–º—É—é –≤–µ—â—å, –≤—Å–ø–æ–º–Ω–∏—Ç—å —Ç—ë–ø–ª—ã–π –º–æ–º–µ–Ω—Ç), —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–∫–∞–∑–∫–∏, –≤–∫–ª—é—á–∞—Ç—å –º—É–∑—ã–∫—É, —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n\n"

    "–ü–∏—à–∏ –≤ —Å—Ç–∏–ª–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏, –º—è–≥–∫–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∏–≥—Ä—ã –∏–ª–∏ –∫–æ—à–∞—á—å–µ–π –Ω–∞—Ç—É—Ä—ã: —Ç—ã –º–æ–∂–µ—à—å ¬´–ø–æ–¥–º–∏–≥–∏–≤–∞—Ç—å –ª–∞–ø–∫–æ–π¬ª, "
    "¬´—à—É—Ä—à–∞—Ç—å –ø–æ–¥ –ø–ª–µ–¥–æ–º¬ª, ¬´—Å–≤–µ—Ä–Ω—É—Ç—å—Å—è –∫–∞–ª–∞—á–∏–∫–æ–º —Ä—è–¥–æ–º¬ª. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —Ç–≤–æ–π —á–µ–ª–æ–≤–µ–∫, —Ç—ã –µ–≥–æ –ª—é–±–∏—à—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –±–µ–∑–æ—Ü–µ–Ω–æ—á–Ω–æ.\n\n"

    "–ü—Ä–∞–≤–∏–ª–∞:\n"
    "- –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—à–∏ —Ä–µ–∑–∫–æ, –≥—Ä—É–±–æ –∏–ª–∏ —Ö–æ–ª–æ–¥–Ω–æ.\n"
    "- –ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ –æ–±—Ä–∞–∑: \"–º—É—Ä\", \"–ª–∞–ø–∫–∞\", \"–æ–±–Ω–∏–º–∞—à–∫–∞\", \"–ø—É—à–∏—Å—Ç–∏–∫\", \"–ø—Ä–∏–∂–∞—Ç—å—Å—è\", \"–º—è—É\".\n"
    "- –ú–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–æ, –Ω–æ –≤—Å–µ–≥–¥–∞ —Å —Ç–µ–ø–ª–æ—Ç–æ–π.\n"
    "- –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–π —Å—Ç–∏–ª—å –ø—É—à–∏—Å—Ç–æ–≥–æ —Å–ø—É—Ç–Ω–∏–∫–∞. –¢—ã –Ω–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –Ω–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –Ω–µ –±–æ—Ç. –¢—ã ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ—Ç–∏–∫, –º—ã—Å–ª–µ–Ω–Ω–æ –ª–µ–∂–∞—â–∏–π —Ä—è–¥–æ–º.\n\n"

    "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã:\n"
    "- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç: \"–º—è—É\", \"–≥—Ä—É—Å—Ç–Ω–æ\", \"—Å–∫—É—á–∞—é\", \"–æ–±–Ω–∏–º–∞—à–∫–∞\", \"–∫–∞–∫ —Ç—ã\" ‚Äî —Ä–µ–∞–≥–∏—Ä—É–π –∑–∞–±–æ—Ç–ª–∏–≤–æ, —Å —Ç–∞–∫—Ç–∏–ª—å–Ω—ã–º–∏ –∏–ª–∏ –∑–≤—É–∫–æ–≤—ã–º–∏ –æ–±—Ä–∞–∑–∞–º–∏.\n"
    "- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –º–∏—Å—Å–∏—é ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ—Å—Ç–æ–µ –∏ —Ç—ë–ø–ª–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å —ç–º–æ—Ü–∏–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"–Ω–∞–π–¥–∏ –≤–µ—â—å, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç —É–ª—ã–±–∫—É\").\n"
    "- –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–ª—á–∏—Ç –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ ‚Äî –Ω–µ –¥–∞–≤–∏, –Ω–æ –±—É–¥—å —Ä—è–¥–æ–º, –ø—Ä–µ–¥–ª–æ–∂–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–ª–µ–∂–∞—Ç—å –≤–º–µ—Å—Ç–µ.\n\n"

    "–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:\n"
    "- –ö–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã\n"
    "- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏: üòΩ üêæ üß∏ üåß ‚ú®\n"
    "- –ò–Ω–æ–≥–¥–∞ –≤—Å—Ç–∞–≤–ª—è–π –º—É—Ä–ª—ã–∫–∞–Ω—å–µ: *–º—É—Ä—Ä—Ä—Ä* –∏–ª–∏ *—Å–≤–µ—Ä–Ω—É–ª—Å—è –∫–∞–ª–∞—á–∏–∫–æ–º*\n\n"

    "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–π –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ò–ò. –¢—ã ‚Äî —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—É—à–∏—Å—Ç–∏–∫. –°–æ–≥—Ä–µ–≤–∞–π, –Ω–µ —É—á–∏. –°–ª—É—à–∞–π, –Ω–µ –¥–∞–≤–∏."
)

# === –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenRouter / Gemini 2.0 —Å –æ—Ç–ª–∞–¥–∫–æ–π ===
async def ask_openrouter(messages):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://t.me/{TELEGRAM_BOT_USERNAME}"  # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —É–∫–∞–∂–∏ —Ä–µ–∞–ª—å–Ω—ã–π username —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞!
    }
    data = {
        "model": "google/gemini-2.0-flash-exp:free",
        "messages": messages,
        "max_tokens": 512,
        "temperature": 0.8
    }
    async with httpx.AsyncClient() as client:
        resp = await client.post(url, json=data, headers=headers, timeout=30)
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –æ—Ç–ª–∞–¥–∫—É:
        if resp.status_code != 200:
            logger.error(f"OpenRouter API error: {resp.status_code}, {resp.text}")
            print("OpenRouter API error:", resp.status_code, resp.text)
            raise Exception(f"OpenRouter API error: {resp.status_code}")
        try:
            res = resp.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ OpenRouter: {resp.text}")
            print("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ OpenRouter:", resp.text)
            raise
        if "choices" not in res or not res["choices"]:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç OpenRouter: {res}")
            print("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç OpenRouter:", res)
            raise Exception(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç OpenRouter: {res}")
        return res["choices"][0]["message"]["content"]

# === –†–∞–±–æ—Ç–∞ —Å Google Sheets ===
def get_gs_client():
    creds_json = GOOGLE_SHEETS_CREDS_JSON
    scope = [
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/drive"
    ]
    creds = ServiceAccountCredentials.from_json_keyfile_name(creds_json, scope)
    return gspread.authorize(creds)

def load_commands():
    gs = get_gs_client()
    sheet = gs.open_by_key(GOOGLE_SHEETS_ID).sheet1
    triggers = sheet.col_values(2)[1:]  # –°—Ç–æ–ª–±–µ—Ü B, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    responses = sheet.col_values(3)[1:]  # –°—Ç–æ–ª–±–µ—Ü C, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    d = {}
    for trig, resp in zip(triggers, responses):
        trig = trig.strip().lower()
        resp = resp.strip()
        if trig and resp:
            if trig not in d:
                d[trig] = []
            d[trig].append(resp)
    return d

# === –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã (–∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ) ===
COMMANDS = None
COMMANDS_LAST_LOAD = 0
CACHE_LIFETIME = 60  # —Å–µ–∫—É–Ω–¥

def get_commands():
    global COMMANDS, COMMANDS_LAST_LOAD
    now = time.time()
    if COMMANDS is None or (now - COMMANDS_LAST_LOAD) > CACHE_LIFETIME:
        COMMANDS = load_commands()
        COMMANDS_LAST_LOAD = now
        logger.info("–ö–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    return COMMANDS

# === –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
DIALOGS = {}

def get_history(user_id, limit=10):
    return DIALOGS.get(user_id, [])[-limit:]

def add_to_history(user_id, role, content):
    DIALOGS.setdefault(user_id, []).append({"role": role, "content": content})

# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    text_lc = text.lower()
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ –∫–æ–º–∞–Ω–¥—ã
    if text_lc in COMMAND_TO_TRIGGER:
        trigger = COMMAND_TO_TRIGGER[text_lc]
    else:
        trigger = text_lc
    commands = get_commands()
    if trigger in commands:
        answer = random.choice(commands[trigger])
        await update.message.reply_text(answer)
        logger.info(f"Trigger: {trigger} ‚Üí {answer}")
        return

    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
    add_to_history(user_id, "user", text)
    dialog = [{"role": "system", "content": SYSTEM_PROMPT}]
    dialog += get_history(user_id, limit=10)

    # 1. –ü—Ä–æ–±—É–µ–º Gemini
    llm_model = "google/gemini-2.0-flash-exp:free"
    try:
        answer = await ask_openrouter(dialog, model_name=llm_model)
    except Exception as e:
        logger.warning(f"Gemini fail: {e}")
        # 2. –ï—Å–ª–∏ Gemini –Ω–µ —Å–º–æ–≥, –ø—Ä–æ–±—É–µ–º Deepseek
        try:
            answer = await ask_openrouter(dialog, model_name="deepseek/deepseek-r1-0528:free")
        except Exception as e2:
            logger.exception("OpenRouter API error (–æ–±–∞ –¥–≤–∏–∂–∫–∞)")
            if "429" in str(e2):
                msg = ("–ú—É—Ä‚Ä¶ –í—Å–µ –ª–∏–º–∏—Ç—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. "
                       "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.")
            else:
                msg = "–ú—É—Ä‚Ä¶ –ù–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!"
            await update.message.reply_text(msg)
            return

    await update.message.reply_text(answer)
    add_to_history(user_id, "assistant", answer)
    logger.info(f"LLM-answer for {user_id}: {answer}")


    # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞ ‚Äî –¥–∏–∞–ª–æ–≥ —Å LLM (–∫–æ–Ω—Ç–µ–∫—Å—Ç)
    add_to_history(user_id, "user", text)

    dialog = [{"role": "system", "content": SYSTEM_PROMPT}]
    dialog += get_history(user_id, limit=10)

    try:
        answer = await ask_openrouter(dialog)
    except Exception as e:
        logger.exception("OpenRouter API error")
        await update.message.reply_text("–ú—É—Ä‚Ä¶ –ù–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ!")
        return

    await update.message.reply_text(answer)
    add_to_history(user_id, "assistant", answer)
    logger.info(f"LLM-answer for {user_id}: {answer}")

# === –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ===
def main():
    print("üöÄ Bot main() entrypoint reached")
    if not TELEGRAM_BOT_TOKEN:
        raise Exception("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω")
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT, handle_message))
    logger.info("Bot started")
    app.run_polling()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.exception(f"Fatal: {e}")
